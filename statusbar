#!/bin/python

import logging
import os
import json
import sys
from argparse import ArgumentParser, Namespace
from dataclasses import dataclass
from typing import List, Optional, Dict
from asyncio import create_subprocess_shell, run
from asyncio.tasks import gather, sleep
from asyncio.subprocess import PIPE


logger = logging.getLogger(__name__)


@dataclass
class Module:
    path: str
    args: str = ''
    time: float = 0
    value: Optional[str] = None

    def __hash__(self):
        return hash((self.path, self.args, self.time))

    async def exec(self) -> None:
        proc = await create_subprocess_shell(
            cmd=self.path,
            stdout=PIPE,
            stderr=PIPE
        )

        stdout, stderr = await proc.communicate()
        msg = f'Module {self.path}'
        if proc.returncode:
            msg = f'{msg}. Exit-code: {proc.returncode}'
            if stderr:
                msg = f'{msg}. Message: {stderr.decode().strip()}'
            logger.error(msg)
        else:
            self.value = stdout.decode().strip()
            if not self.value:
                logger.warning(f'{msg} did not provide any results to display')
            else:
                logger.debug(f'{msg}. Message: {stdout.decode().strip()}')

class StatusBar:
    def __init__(self, modules: List[Module], delimiter: Optional[str] = "|") -> None:
        self.modules = modules
        self.delimiter = delimiter

    async def display(self) -> None:
        str_status_bar = self.render()
        proc = await create_subprocess_shell(
            cmd=f'xsetroot -name "{str_status_bar}"',
            stdout=PIPE,
            stderr=PIPE
        )

        _, stderr = await proc.communicate()
        if proc.returncode:
            msg = f'xsetroot: Exit-code: {proc.returncode}'
            if stderr:
                msg = f'{msg}. Message: {stderr.decode().strip()}'
            logger.error(msg)

    def render(self) -> str:
        str_status_bar = ''
        delimiter = '' if self.delimiter is None else str(self.delimiter)
        for module in self.modules:
            if module.value:
                str_status_bar += delimiter
                str_status_bar += module.value
        return str_status_bar

def load_modules(raw_modules: List[Dict]) -> List[Module]:
    modules: List[Module] = []
    for rw in raw_modules:

        if not 'path' in rw:
            raise KeyError('Missing "path" key')
        elif not isinstance(rw['path'], str):
            raise ValueError('Key "path" must be a string')
        else:
            path = rw['path']
            if not os.path.dirname(path):
                path = f'{get_pdir()}/modules/{path}'
            if not os.path.exists(path):
                raise FileNotFoundError(f'File not found: {path}')
            if not os.path.isfile(path) or not os.access(path, os.X_OK):
                raise ValueError(f'path must be an executable file')

        module = Module(path=path)
        if 'time' in rw:
            module.time = float(rw['time'])
        if 'args' in rw:
            module.args = str(rw['args'])
        modules.append(module)
        logger.debug(f'Module {module} loaded')
    return modules

def get_user_config_path() -> Optional[str]:
    """
    Obtains the configuration file by looking in these location:
    - $DWM_STATUS_BARList
    - $XDG_CONFIG_HOME/dwm-statusbar/config.json
    - $HOME/.dwm-statusbar.json
    """
    dwm_status_bar = os.environ.get('DWM_STATUS_BAR')
    if dwm_status_bar and os.path.exists(dwm_status_bar):
        return dwm_status_bar

    xdg_config_home = os.environ.get('XDG_CONFIG_HOME')
    if xdg_config_home:
        config = f'{xdg_config_home}/dwm-statusbar/config.json'
        if os.path.exists(config):
            return config

    home = os.environ.get('HOME')
    if home:
        config = f'{home}/.dwm-statusbar.json'
        if os.path.exists(config):
            return config
    return None

async def exec_group_once(group: List[Module], status_bar: StatusBar) -> None:
    await gather(*[x.exec() for x in group])
    await status_bar.display()

async def exec_group(time: float, group: List[Module], status_bar: StatusBar) -> None:
    while True:
        await gather(*[x.exec() for x in group])
        await status_bar.display()
        await sleep(time)

def group_modules(modules: List[Module]) -> Dict[float, List[Module]]:
    groups: Dict[float, List[Module]] = {}
    for module in modules:
        if module.time in groups:
            groups[module.time].append(module)
        else:
            groups[module.time] = [module]
    return groups

def get_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument(
        '--log-level', '-l',
        choices=['info', 'warning', 'error', 'critical', 'debug'],
        default='warning'
    )
    return parser.parse_args()

def get_int_log_level(log_level_name: str) -> int:
    return {
        'debug': 10,
        'info': 20,
        'warning': 30,
        'error': 40,
        'critical': 50
    }[log_level_name]

def get_pdir() -> str:
    return os.path.dirname(os.path.abspath(__file__))

async def main() -> None:
    args = get_args()
    format=(
        "%(name)s:"
        "%(levelname)s:"
        "%(message)s"
    )
    logging.basicConfig(level=get_int_log_level(args.log_level), format=format)

    config_path = get_user_config_path()
    config = None
    if config_path:
        try:
            with open(config_path, mode='r') as f:
                config = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(
                f'An error occurred while loading {config_path}: {e}. '
                'Proceeding with the default configuration.'
            )
    if not config or not config_path:
        try:
            config_path = f'{get_pdir()}/config.json'
            with open(config_path, mode='r') as f:
                config = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.critical(f'An error occurred while loading the default configuration: {e}.')
            sys.exit(1)

    logger.debug(f'Configuration: {config_path}')

    if 'modules' in config:
        modules = load_modules(config['modules'])
    else:
        logger.error(f'Missing module section. Configuration: {config_path}')
        sys.exit(1)

    status_bar = StatusBar(modules, delimiter=config.get('delimiter'))
    gm = group_modules(modules)
    await gather(*[exec_group(time, modules, status_bar) for time, modules in gm.items()])


if __name__ == "__main__":
    run(main())
